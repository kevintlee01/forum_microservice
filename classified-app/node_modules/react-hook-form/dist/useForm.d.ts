import React from 'react';
import { DataType, Props, RegisterInput, OnSubmit, ValidationPayload } from './types';
export default function useForm<Data extends DataType, Name extends keyof Data = keyof Data>({ mode, validationSchema, defaultValues, validationFields, nativeValidation, submitFocusError, }?: Props<Data>): {
    register: (refOrValidateRule: any, validateRule?: RegisterInput | undefined) => ((ref: any) => void) | undefined;
    unregister: {
        (name: string | Name): void;
        (names: (string | Name)[]): void;
    };
    handleSubmit: (callback: OnSubmit<Data>) => (e: React.SyntheticEvent<Element, Event>) => Promise<void>;
    watch: {
        (): Data;
        (field: string | Name, defaultValue?: string | undefined): any;
        (fields: (string | Name)[], defaultValues?: Partial<Data> | undefined): Partial<Data>;
    };
    reset: (values?: Record<string, any> | undefined) => void;
    clearError: (name?: Name | Name[] | undefined) => void;
    setError: (name: Name, type: string, message?: string | undefined, ref?: any) => void;
    setValue: (name: Name, value: Data[Name], shouldValidate?: boolean) => void;
    triggerValidation: (payload?: ValidationPayload<Name, Data[Name]> | ValidationPayload<Name, Data[Name]>[] | undefined) => Promise<boolean>;
    getValues: (payload?: {
        nest: boolean;
    } | undefined) => Data;
    errors: import("./types").ObjectErrorMessages<Data>;
    formState: {
        isValid: boolean;
        dirty: boolean;
        isSubmitted: boolean;
        submitCount: number;
        touched: Name[];
        isSubmitting: boolean;
    };
};
